# =============================================================================
# GitHub Actions Workflow - Deploy to Netlify
# =============================================================================
# This workflow automatically deploys your GitHub Backend API to Netlify
# when you push to the main branch

name: Deploy to Netlify

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # =============================================================================
  # Test Job - Run tests and linting
  # =============================================================================
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint --if-present
    
    - name: Run tests
      run: npm test --if-present
    
    - name: Build project
      run: npm run build --if-present
      env:
        NODE_ENV: production

  # =============================================================================
  # Security Scan Job - Check for vulnerabilities
  # =============================================================================
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # =============================================================================
  # Deploy Job - Deploy to Netlify
  # =============================================================================
  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build --if-present
      env:
        NODE_ENV: production
        ACESS_TOKEN: ${{ secrets.ACESS_TOKEN }}
        BACKEND_PASSWORD: ${{ secrets.BACKEND_PASSWORD }}
    
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        ACESS_TOKEN: ${{ secrets.ACESS_TOKEN }}
        BACKEND_PASSWORD: ${{ secrets.BACKEND_PASSWORD }}
        API_KEY: ${{ secrets.API_KEY }}
        ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
    
    - name: Comment deployment URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ Deployment successful! Check the [preview URL](https://deploy-preview-${{ github.event.number }}--${{ secrets.NETLIFY_SITE_ID }}.netlify.app) for this PR.'
          })

  # =============================================================================
  # Docker Build Job - Test Docker build
  # =============================================================================
  docker:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: github-backend-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 3000:3000 \
          -e BACKEND_PASSWORD=test-password \
          -e ACESS_TOKEN=dummy-token \
          github-backend-api:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:3000/status || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # =============================================================================
  # Performance Test Job - Basic performance testing
  # =============================================================================
  performance:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start server
      run: |
        npm start &
        sleep 10
      env:
        BACKEND_PASSWORD: test-password
        ACESS_TOKEN: dummy-token
    
    - name: Install Artillery
      run: npm install -g artillery
    
    - name: Run performance tests
      run: |
        echo "config:" > perf-test.yml
        echo "  target: 'http://localhost:3000'" >> perf-test.yml
        echo "  phases:" >> perf-test.yml
        echo "    - duration: 30" >> perf-test.yml
        echo "      arrivalRate: 5" >> perf-test.yml
        echo "scenarios:" >> perf-test.yml
        echo "  - name: 'Health check'" >> perf-test.yml
        echo "    requests:" >> perf-test.yml
        echo "      - get:" >> perf-test.yml
        echo "          url: '/status'" >> perf-test.yml
        
        artillery run perf-test.yml

# =============================================================================
# Workflow Configuration Notes:
# =============================================================================
#
# Required GitHub Secrets:
# - ACESS_TOKEN: Your GitHub Personal Access Token
# - BACKEND_PASSWORD: Secure password for API access
# - NETLIFY_AUTH_TOKEN: Netlify authentication token
# - NETLIFY_SITE_ID: Your Netlify site ID
# 
# Optional Secrets:
# - API_KEY: Alternative authentication method
# - ALLOWED_ORIGINS: CORS configuration
#
# To set up secrets:
# 1. Go to your repository on GitHub
# 2. Click Settings â†’ Secrets and variables â†’ Actions
# 3. Click "New repository secret" for each secret
#
# =============================================================================
