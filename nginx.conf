# GitHub Backend API 🚀

A comprehensive, production-ready backend API for GitHub integration, designed for serverless deployment on Netlify with full Docker support for local development.

## 🌟 Features

### Core Functionality
- **Password & API Key Authentication** - Dual authentication methods
- **Complete GitHub Integration** - Full GitHub API access via personal tokens
- **RESTful API Design** - Clean, intuitive endpoint structure
- **Rate Limiting** - Built-in protection against abuse
- **CORS Support** - Configurable cross-origin resource sharing
- **Error Handling** - Comprehensive error responses with timestamps
- **Health Monitoring** - Built-in health checks and status endpoints
- **Security Headers** - Helmet.js security middleware

### GitHub Operations
- **User Management** - Get user info, repositories, organizations
- **Repository Operations** - List, get details, manage contents, commits, branches
- **Issue Management** - Create, read, update, list issues and comments
- **Search Functionality** - Search repos, users, issues, commits
- **Generic API Proxy** - Direct access to any GitHub API endpoint
- **Rate Limit Monitoring** - Check your GitHub API rate limits

### Deployment Options
- **Netlify Serverless** - Primary deployment target
- **Docker Support** - Full containerization with multi-stage builds
- **Local Development** - Express server for local testing
- **Nginx Integration** - Production-ready reverse proxy setup

## 📁 Project Structure

```
github-backend-api/
├── 📄 server.js                 # Main Express application
├── 📄 package.json              # Dependencies and scripts
├── 📁 netlify/
│   └── 📁 functions/
│       └── 📄 server.js         # Netlify serverless function
├── 📄 netlify.toml              # Netlify deployment config
├── 📄 Dockerfile               # Docker configuration
├── 📄 docker-compose.yml       # Docker Compose setup
├── 📄 nginx.conf               # Nginx reverse proxy config
├── 📄 .env.example             # Environment variables template
├── 📄 .gitignore               # Git ignore rules
├── 📄 .dockerignore            # Docker ignore rules
└── 📄 README.md                # This file
```

## 🚀 Quick Start

### 1. Repository Setup

1. **Create GitHub Repository**
   ```bash
   git clone <your-repo-url>
   cd github-backend-api
   npm install
   ```

2. **Environment Configuration**
   ```bash
   cp .env.example .env
   # Edit .env with your values
   ```

3. **GitHub Personal Access Token**
   - Go to [GitHub Settings → Developer settings → Personal access tokens](https://github.com/settings/tokens)
   - Generate new token with scopes: `repo`, `user`, `read:org`, `gist`
   - Add to `.env` as `ACESS_TOKEN`

### 2. Local Development

```bash
# Install dependencies
npm install

# Start development server
npm run dev

# Test the API
curl http://localhost:3000/status
```

### 3. Netlify Deployment

1. **Connect Repository to Netlify**
   - Link your GitHub repository to Netlify

2. **Configure Environment Variables**
   - Go to Site Settings → Environment variables
   - Add required variables:
     ```
     ACESS_TOKEN=your_github_token
     BACKEND_PASSWORD=your_secure_password
     NODE_ENV=production
     ```

3. **Deploy**
   - Netlify will automatically deploy on git push
   - Your API will be available at `https://your-site.netlify.app`

### 4. Docker Deployment

```bash
# Basic setup
docker-compose up -d

# With Nginx proxy
docker-compose --profile with-proxy up -d

# With Redis caching
docker-compose --profile with-cache up -d

# Full stack with database
docker-compose --profile with-proxy --profile with-cache --profile with-database up -d
```

## 🔐 Authentication

The API supports two authentication methods:

### Method 1: Password Authentication
```bash
# Via Header
curl -H "x-password: your-password" https://your-api.netlify.app/github/user

# Via Query Parameter
curl "https://your-api.netlify.app/github/repos?password=your-password"
```

### Method 2: API Key Authentication (Optional)
```bash
# Via Header
curl -H "x-api-key: your-api-key" https://your-api.netlify.app/github/user

# Via Query Parameter
curl "https://your-api.netlify.app/github/repos?api_key=your-api-key"
```

## 📚 API Documentation

### Base Endpoints

| Method | Endpoint | Description | Auth Required |
|--------|----------|-------------|---------------|
| GET | `/` | API documentation | ❌ |
| GET | `/status` | Health check | ❌ |
| GET | `/health` | Detailed health info | ❌ |

### GitHub User Endpoints

| Method | Endpoint | Description | Auth Required |
|--------|----------|-------------|---------------|
| GET | `/github/user` | Get authenticated user | ✅ |
| GET | `/github/user/repos` | Get user repositories | ✅ |
| GET | `/github/user/orgs` | Get user organizations | ✅ |

### GitHub Repository Endpoints

| Method | Endpoint | Description | Auth Required |
|--------|----------|-------------|---------------|
| GET | `/github/repos` | List user repositories | ✅ |
| GET | `/github/repo/:owner/:repo` | Get repository details | ✅ |
| GET | `/github/repo/:owner/:repo/contents/:path?` | Get repository contents | ✅ |
| GET | `/github/repo/:owner/:repo/commits` | Get repository commits | ✅ |
| GET | `/github/repo/:owner/:repo/branches` | Get repository branches | ✅ |

### GitHub Issues Endpoints

| Method | Endpoint | Description | Auth Required |
|--------|----------|-------------|---------------|
| GET | `/github/repo/:owner/:repo/issues` | List repository issues | ✅ |
| GET | `/github/repo/:owner/:repo/issues/:number` | Get specific issue | ✅ |
| POST | `/github/repo/:owner/:repo/issues` | Create new issue | ✅ |
| PATCH | `/github/repo/:owner/:repo/issues/:number` | Update issue | ✅ |

### GitHub Search Endpoints

| Method | Endpoint | Description | Auth Required |
|--------|----------|-------------|---------------|
| GET | `/github/search/repos` | Search repositories | ✅ |
| GET | `/github/search/users` | Search users | ✅ |
| GET | `/github/search/issues` | Search issues | ✅ |

### Utility Endpoints

| Method | Endpoint | Description | Auth Required |
|--------|----------|-------------|---------------|
| GET | `/github/rate-limit` | Check API rate limits | ✅ |
| ALL | `/github/api/*` | Generic GitHub API proxy | ✅ |

## 💡 Usage Examples

### Get User Information
```bash
curl -H "x-password: your-password" \
     https://your-api.netlify.app/github/user
```

### List Repositories
```bash
curl -H "x-password: your-password" \
     "https://your-api.netlify.app/github/repos?sort=updated&per_page=10"
```

### Create an Issue
```bash
curl -X POST \
     -H "x-password: your-password" \
     -H "Content-Type: application/json" \
     -d '{
       "title": "Bug Report",
       "body": "Description of the bug",
       "labels": ["bug", "priority:high"]
     }' \
     https://your-api.netlify.app/github/repo/owner/repo/issues
```

### Search Repositories
```bash
curl -H "x-password: your-password" \
     "https://your-api.netlify.app/github/search/repos?q=react+language:javascript&sort=stars"
```

### Check Rate Limits
```bash
curl -H "x-password: your-password" \
     https://your-api.netlify.app/github/rate-limit
```

## ⚙️ Configuration

### Environment Variables

| Variable | Required | Default | Description |
|----------|----------|---------|-------------|
| `ACESS_TOKEN` | ✅ | - | GitHub Personal Access Token |
| `BACKEND_PASSWORD` | ✅ | - | API access password |
| `API_KEY` | ❌ | - | Alternative API key for auth |
| `PORT` | ❌ | 3000 | Server port |
| `NODE_ENV` | ❌ | development | Environment mode |
| `ALLOWED_ORIGINS` | ❌ | * | CORS allowed origins |
| `RATE_LIMIT_WINDOW_MS` | ❌ | 15 | Rate limit window (minutes) |
| `RATE_LIMIT_MAX_REQUESTS` | ❌ | 100 | Max requests per window |

### GitHub Token Scopes

Your GitHub Personal Access Token needs these scopes:

- `repo` - Full repository access
- `user` - User profile information
- `read:org` - Organization membership
- `gist` - Gist management (optional)

## 🛡️ Security Features

- **Helmet.js Security Headers** - XSS protection, content type sniffing prevention
- **Rate Limiting** - Prevents API abuse
- **Input Validation** - Validates all incoming requests
- **Error Sanitization** - Prevents information leakage
- **CORS Configuration** - Configurable cross-origin policies
- **Authentication Required** - All sensitive endpoints protected

## 🐳 Docker Usage

### Development
```bash
# Build and run
docker-compose up -d

# View logs
docker-compose logs -f github-backend-api

# Stop services
docker-compose down
```

### Production with Nginx
```bash
# Full production stack
docker-compose --profile with-proxy --profile with-cache up -d

# Custom configuration
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
```

## 📊 Monitoring &
